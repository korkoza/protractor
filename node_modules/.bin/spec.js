// spec.js
describe('Protractor Demo App', function() {
    var firstNumber = element(by.model('first'));
    var secondNumber = element(by.model('second'));
    var goButton = element(by.id('gobutton'));
    var latestResult = element(by.binding('latest'));
    var history = element.all(by.repeater('result in memory'));
      
  
    async function addition(a, b) {
        await element(by.css('option:nth-child(1)')).click();
        await firstNumber.sendKeys(a);
        await secondNumber.sendKeys(b);
        await goButton.click();
      }
      
    async function division(a, b) {
        await element(by.css('option:nth-child(2)')).click();
        await firstNumber.sendKeys(a);
        await secondNumber.sendKeys(b);
        await goButton.click();
      }
  
    async function modulo(a, b) {
        await element(by.css('option:nth-child(3)')).click();
        await firstNumber.sendKeys(a);
        await secondNumber.sendKeys(b);
        await goButton.click();
      }
    
    async function multiplication(a, b) {
        await element(by.css('option:nth-child(4)')).click();
        await firstNumber.sendKeys(a);
        await secondNumber.sendKeys(b);
        await goButton.click();
      } 

      async function substraction(a, b) {
        await element(by.css('option:nth-child(5)')).click();
        await firstNumber.sendKeys(a);
        await secondNumber.sendKeys(b);
        await goButton.click();
      }  

    beforeEach(async function() {
        await  browser.get('http://juliemr.github.io/protractor-demo/');
    });

    it('should add one and two', async function() {
        await addition(browser.params.add[0], browser.params.add[1]);
                
        await expect(latestResult.getText()).toEqual(browser.params.add[2]);
    });

    it('division', async function() {
        await division(browser.params.div[0], browser.params.div[1]);
                
        await expect(latestResult.getText()).toEqual(browser.params.div[2]);
    });

    it('should add one and two', async function() {
        await modulo(browser.params.mod[0], browser.params.mod[1]);
                
        await expect(latestResult.getText()).toEqual(browser.params.mod[2]);
    });

    it('multi', async function() {
        await multiplication(browser.params.multi[0], browser.params.multi[1]);
                
        await expect(latestResult.getText()).toEqual(browser.params.multi[2]);
    });

    it('subtraction', async function() {
        await substraction(browser.params.sub[0], browser.params.sub[1]);
                
        await expect(latestResult.getText()).toEqual(browser.params.sub[2]);
    });
  });